# Adaptação da Ficha de Personagem para Múltiplos Sistemas WoD

## Checklist de Tarefas

### 1. Reestruturação de Diretórios
- [ ] Criar estrutura de pastas para componentes comuns
  - /components/characterSheet/common
  - /components/characterSheet/vampire
  - /components/characterSheet/werewolf
- [ ] Mover componentes genéricos para pasta common
  - DotRating
  - AttributeGroup (após refatoração)
  - BasicInfoCard
- [ ] Criar versões específicas dos componentes para cada sistema

### 2. Refatoração de Componentes
- [ ] Transformar VampireInfoCard em um componente genérico SystemInfoCard
- [ ] Adaptar AttributesSection para usar configuração dinâmica
- [ ] Criar HOC (Higher Order Component) para injetar configurações específicas do sistema
- [ ] Implementar seletor de sistema/versão no topo da ficha

### 3. Sistema de Configuração
- [ ] Criar estrutura de configuração para cada sistema
  - /config/vampire/v20
  - /config/vampire/v3
  - /config/werewolf/w20
- [ ] Definir schemas JSON para cada tipo de configuração
  - attributes.json
  - abilities.json
  - advantages.json
  - system-specific.json

### 4. Gerenciamento de Estado
- [ ] Refatorar CharacterSheet para usar estado baseado no sistema
- [ ] Implementar context para compartilhar configurações do sistema
- [ ] Criar hooks personalizados para lógica específica de cada sistema
- [ ] Adicionar sistema de persistência local

### 5. Estilização
- [ ] Criar temas específicos para cada sistema
- [ ] Implementar sistema de troca de temas
- [ ] Adaptar componentes visuais para cada sistema

## Integração com Google Drive

### 1. Configuração do Google Cloud Project
- [ ] Criar projeto no Google Cloud Console
- [ ] Habilitar Google Drive API
- [ ] Configurar tela de consentimento OAuth
- [ ] Criar credenciais OAuth 2.0
  - Tipo: Aplicação Web
  - URIs de redirecionamento autorizados
  - Origens JavaScript autorizadas

### 2. Implementação da Autenticação
- [ ] Instalar dependências necessárias
  ```bash
  npm install @react-oauth/google @googleapis/drive
  ```
- [ ] Criar componente de login com Google
- [ ] Implementar fluxo OAuth2
- [ ] Armazenar tokens de acesso de forma segura
- [ ] Criar context para estado de autenticação

### 3. Gerenciamento de Arquivos
- [ ] Criar estrutura de pasta padrão no Drive
  ```
  /WoD Character Sheets
    /Vampire
      /V20
      /V3
    /Werewolf
      /W20
  ```
- [ ] Implementar funções de CRUD
  - Criar novo personagem (createFile)
  - Carregar personagem (readFile)
  - Atualizar personagem (updateFile)
  - Deletar personagem (deleteFile)
- [ ] Adicionar versionamento de personagens
- [ ] Implementar sistema de backup automático

### 4. Interface do Usuário
- [ ] Criar modal de seleção de personagens
- [ ] Implementar preview de personagens
- [ ] Adicionar opções de compartilhamento
- [ ] Criar interface de gerenciamento de arquivos

### 5. Tratamento Offline
- [ ] Implementar cache local dos personagens
- [ ] Criar sistema de sincronização
- [ ] Adicionar indicador de status de sincronização
- [ ] Tratar conflitos de versão

### Exemplo de Código Base

```javascript
// src/services/googleDrive.js
export class GoogleDriveService {
  constructor(accessToken) {
    this.drive = google.drive({ version: 'v3', auth: accessToken });
  }

  async createCharacterSheet(character) {
    const metadata = {
      name: `${character.name}.json`,
      mimeType: 'application/json',
      parents: [await this.getOrCreateFolder('WoD Character Sheets')]
    };

    const media = {
      mimeType: 'application/json',
      body: JSON.stringify(character)
    };

    return await this.drive.files.create({
      resource: metadata,
      media: media,
      fields: 'id'
    });
  }

  async getOrCreateFolder(folderName) {
    // Implementar lógica de criação/busca de pasta
  }
}

// src/hooks/useGoogleDrive.js
export const useGoogleDrive = () => {
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);

  const saveCharacter = async (character) => {
    try {
      setIsLoading(true);
      // Implementar lógica de salvamento
    } catch (err) {
      setError(err);
    } finally {
      setIsLoading(false);
    }
  };

  return { isLoading, error, saveCharacter };
};
```

### Notas de Segurança
- Nunca armazenar tokens de acesso em localStorage
- Implementar refresh token adequadamente
- Usar scope mínimo necessário nas permissões
- Validar dados antes de salvar/carregar
- Implementar rate limiting para chamadas à API

### Links Úteis
- Google Drive API Reference: https://developers.google.com/drive/api/v3/reference
- Google OAuth 2.0: https://developers.google.com/identity/protocols/oauth2
- React OAuth2 Client: https://github.com/MomenSherif/react-oauth

## Ordem de Implementação Sugerida

1. Começar pela reestruturação de diretórios
2. Criar sistema de configuração básico
3. Adaptar componentes um por um, começando pelos mais simples
4. Implementar gerenciamento de estado
5. Adicionar estilos específicos por sistema
6. Implementar integração com Google Drive

## Notas Importantes

- Manter compatibilidade com dados existentes
- Documentar todas as mudanças na estrutura
- Criar testes para novas funcionalidades
- Manter backup dos dados antes de cada refatoração

## Comandos Úteis

```bash
# Criar nova estrutura de diretórios
mkdir -p src/components/characterSheet/{common,vampire,werewolf}

# Mover componentes
git mv src/components/characterSheet/DotRating.jsx src/components/characterSheet/common/

# Criar arquivos de configuração
mkdir -p src/config/{vampire,werewolf}/{v20,v3,w20}
```

## Links Úteis

- Material-UI Components: https://mui.com/components/
- React Context API: https://reactjs.org/docs/context.html
- TypeScript Handbook: https://www.typescriptlang.org/docs/handbook/intro.html
